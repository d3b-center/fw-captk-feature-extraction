#!/bin/bash
#
#	template based on:  https://github.com/scitran-apps/fsl-bet/blob/master/run
#

CONTAINER="[captk-feature-extraction]"
echo -e "$CONTAINER  Initiated"

export LC_ALL=C.UTF-8
export LANG=C.UTF-8

###############################################################################
## Built to flywheel-v0 spec.
FLYWHEEL_BASE=/flywheel/v0
OUTPUT_DIR=$FLYWHEEL_BASE/output
t1_DIR=$FLYWHEEL_BASE/input/T1
t1ce_DIR=$FLYWHEEL_BASE/input/T1CE
t2_DIR=$FLYWHEEL_BASE/input/T2
fl_DIR=$FLYWHEEL_BASE/input/FLAIR
adc_DIR=$FLYWHEEL_BASE/input/diffusion-ADC
brain_mask_DIR=$FLYWHEEL_BASE/input/brain-mask
seg_DIR=$FLYWHEEL_BASE/input/Tumor-segmentation-mask
feat_DIR=$FLYWHEEL_BASE/input/feature-definition-file
MANIFEST=$FLYWHEEL_BASE/manifest.json
CONFIG_FILE=$FLYWHEEL_BASE/config.json

###############################################################################
## Configure the ENV
export USER=Flywheel

###############################################################################
## Execute the main processes
function jsonValue() {
KEY=$1
num=$2
awk -F"[,:}]" '{for(i=1;i<=NF;i++){if($i~/'$KEY'\042/){print $(i+1)}}}' | tr -d '"' | sed -n ${num}p
}

## get all user configurations
if [[ -f $CONFIG_FILE ]]; then
  echo "$CONTAINER  $CONFIG_FILE found. Loading config..."

  sub_id="$(cat $CONFIG_FILE | jsonValue subject_label)"
  output_fn="$(cat $CONFIG_FILE | jsonValue output_file_name)"

  # whether to perform normalization
  norm_flag_bool="$(cat $CONFIG_FILE | jsonValue perform_normalization)"
  if [[ $norm_flag_bool == 'true' ]]; then
    norm_flag=1
  elif [[ $norm_flag_bool == 'false' ]]; then
    norm_flag=0
  fi

  # whether to use tumor seg + brain mask during normalization
  seg_flag_bool="$(cat $CONFIG_FILE | jsonValue use_mask_union)"
  if [[ $seg_flag_bool == 'true' ]]; then
    seg_flag=1
  elif [[ $seg_flag_bool == 'false' ]]; then
    seg_flag=0
  fi


else
  echo "$CONTAINER  $CONFIG_FILE not found. Loading defaults from $MANIFEST..."

  sub_id="$(cat $MANIFEST | jsonValue subject_label default)"
  output_fn="$(cat $MANIFEST | jsonValue output_file_name default)"
  norm_flag=0
  seg_flag=0

fi

echo "normalization flag: $norm_flag"

## Find the input files
echo "$CONTAINER  Loading input files..."
seg_file=$(find $seg_DIR/* -maxdepth 0 -type f -name "*.nii*")
# optional inputs
if [[ -d $t1_DIR ]] ; then
  t1_file=$(find $t1_DIR/* -maxdepth 0 -type f -name "*.nii*")
fi
if [[ -d $t1ce_DIR ]] ; then
  t1ce_file=$(find $t1ce_DIR/* -maxdepth 0 -type f -name "*.nii*")
fi
if [[ -d $t2_DIR ]] ; then
  t2_file=$(find $t2_DIR/* -maxdepth 0 -type f -name "*.nii*")
fi
if [[ -d $fl_DIR ]] ; then
  fl_file=$(find $fl_DIR/* -maxdepth 0 -type f -name "*.nii*")
fi
if [[ -d $adc_DIR ]] ; then
  adc_file=$(find $adc_DIR/* -maxdepth 0 -type f -name "*.nii*")
fi
if [[ -d $brain_mask_DIR ]] ; then
  brain_mask_file=$(find $brain_mask_DIR/* -maxdepth 0 -type f -name "*.nii*")
fi
if [[ -d $feat_DIR ]] ; then
  feat_file=$(find $feat_DIR/* -maxdepth 0 -type f -name "*.csv*")
fi


## Define command options based on input files
if [[ -f $t1_file ]] ; then
    im_type_flag='T1'
    im_fname=$t1_file
fi

if [[ -f $t1ce_file ]] ; then
  if [[ -z "$im_type_flag" ]] ; then
    im_type_flag='T1Gd'
    im_fname=$t1ce_file
  else
    im_type_flag=$im_type_flag',T1gd'
    im_fname=$im_fname','$t1ce_file
  fi
fi

if [[ -f $t2_file ]] ; then
  if [[ -z "$im_type_flag" ]] ; then
    im_type_flag='T2'
    im_fname=$t2_file
  else
    im_type_flag=$im_type_flag',T2'
    im_fname=$im_fname','$t2_file
  fi
fi

if [[ -f $fl_file ]] ; then
  if [[ -z "$im_type_flag" ]] ; then
    im_type_flag='FLAIR'
    im_fname=$fl_file
  else
    im_type_flag=$im_type_flag',FLAIR'
    im_fname=$im_fname','$fl_file
  fi
fi

if [[ -f $adc_file ]] ; then
  if [[ -z "$im_type_flag" ]] ; then
    im_type_flag='DWI'
    im_fname=$adc_file
  else
    im_type_flag=$im_type_flag',DWI'
    im_fname=$im_fname','$adc_file
  fi
fi

## define feature parameter file
# if user input a file use that, otherwise use CaPTk default
if [[ ! -f $feat_file ]] ; then
  # feat_file=/opt/captk/1.8.1/usr/data/features/1_params_default.csv
  feat_file=radiomic_feature_params_20230725.csv
fi
echo "$CONTAINER  Using feature parameter file: $feat_file."


## update output file name if user-defined
out_path="output/"
out_path+=$output_fn
out_path="$(echo -e "${out_path}" | tr -d '[:space:]')" # remove spaces

## If necessary input files are found, run the thing
if [[ ! -z $im_fname ]] ; then

  CaPTk_dir=/opt/captk/1.8.1/usr # path to installation (in Docker container)

  echo "$CONTAINER  Binarizing ROI file"
  bin_roi_fn="bin_roi.nii.gz"
  ${CaPTk_dir}/bin/Utilities -i "${seg_file}" -o "${bin_roi_fn}" -cm

  # =========================== perform normalization if specified ===========================
  if [[ $norm_flag == 1 ]]; then
    echo "$CONTAINER Beginning normalization..."
    # binarize brain mask just in case
    if [[ ! -f $brain_mask_file ]] ; then
      echo "$CONTAINER ERROR: Normalization selected but no brain mask input file found!"
      exit 1
    else
      bin_fn="bin_brain_mask.nii.gz"
      ${CaPTk_dir}/bin/Utilities -i "${brain_mask_file}" -o "${bin_fn}" -cm
    fi

    # take union of tumor segmentation & brain mask if user specified, otherwise use just the original brain mask
    if [[ $seg_flag == 1 ]]; then
      # combine the two files into one
      python3 combine_segmentations.py ${bin_roi_fn} ${bin_fn} 'output/combined_segmentation.nii.gz'
      brain_mask_2_use='output/combined_segmentation.nii.gz'
      echo "$CONTAINER Using combined masks for normalization"
    else
      echo "$CONTAINER Using input brain tumor mask for normalization"
      brain_mask_2_use=${bin_fn}
    fi

    # now run normalization on input files if T1/T1CE/T2/FLAIR
    temp_im_fname=${im_fname}
    im_fname=
    IFS=',' read -ra im_type_array <<< "$im_type_flag" # get an array of the image types
    ind=0
    for im in ${temp_im_fname//,/ } ; do
      # skip if DWI
      if [[ ${im_type_array[ind]} != 'DWI' ]]; then
        
        # get base file name
        base=$(basename "${im}" .nii.gz) # assumes ends in '.nii.gz' not '.nii'

        # apply brain mask
        python3 apply_mask.py ${brain_mask_2_use} ${im} ${base}_ss.nii.gz

        # normalize the image
        python3 normalize_images.py ${base}_ss.nii.gz output/${base}_ss_norm.nii.gz

        # update list of images
        im_fname=$im_fname',output/'${base}_ss_norm.nii.gz
        echo "$CONTAINER Normalization complete, output: ${base}_ss_norm.nii.gz"
      fi
      ind=$(( ${ind} + 1 ))
    done
  fi


  # =========================== run feature extraction =======================================
  echo "$CONTAINER  Running CaPTk Feature Extraction"
  echo "$CONTAINER             input files: ${im_fname}"
  ${CaPTk_dir}/bin/FeatureExtraction \
    -n "${sub_id}" \
    -i "${im_fname}" \
    -t "${im_type_flag}" \
    -m "${bin_roi_fn}" \
    -r 1 \
    -l "tumor_core" \
    -p "${feat_file}" \
    -o "${out_path}"

################# Finish up #################
  if [[ ! -f $out_path ]] ; then # if output file is not found
    echo "$CONTAINER  No output files!"
    exit 1
  else # if output file exists:
    STATUS=0
  fi
else
  echo "$CONTAINER  Input files not found!"
  exit 1
fi

# Check exit status
if [[ $STATUS == 0 ]] ; then
    echo -e "$CONTAINER  Done!"
  else
    echo "$CONTAINER  command returned a non-zero exit code = [$STATUS]."
    exit 1
fi

exit 0
